version: '3.8'

services:
  # Frontend - JavaScript/React Application
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - backend
    networks:
      - trading-network

  # Backend - FastAPI MCP Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - OLLAMA_HOST=http://ollama:11434
    volumes:
      - ./mcp_trading_agent:/app/mcp_trading_agent
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - ollama
      - redis
    networks:
      - trading-network

  # Ollama - Local LLM Server
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    networks:
      - trading-network

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  # PostgreSQL - Data Storage (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=trading_agent
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=trading123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network

  # Nginx - Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - trading-network

volumes:
  ollama_data:
  redis_data:
  postgres_data:

networks:
  trading-network:
    driver: bridge